from PyQt6.QtCore import pyqtSignal, QObject, Qt
from PyQt6.QtWidgets import QMessageBox, QFileDialog, QTableWidgetItem, QHeaderView, QListView, QAbstractItemView, \
    QTreeView, QDialog


class MultiDirectoryDialog(QFileDialog):
    def __init__(self, parent=None, caption='', directory=''):
        super().__init__(parent, caption, directory)
        self.setFileMode(QFileDialog.FileMode.Directory)
        self.setOption(QFileDialog.Option.DontUseNativeDialog, True)
        self.findChild(QListView, 'listView').setSelectionMode(QAbstractItemView.SelectionMode.MultiSelection)
        self.findChild(QTreeView, 'treeView').setSelectionMode(QAbstractItemView.SelectionMode.MultiSelection)

    @staticmethod
    def getExistingDirectories(parent=None, caption='', directory=''):
        dialog = MultiDirectoryDialog(parent, caption, directory)
        if dialog.exec() == QDialog.DialogCode.Accepted:
            return dialog.selectedFiles()
        return []


class CatalogPanelController(QObject):
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
    book_selected = pyqtSignal(object, object)

    def __init__(self, view, model):
        super().__init__()
        self.view = view
        self.model = model
        self._current_sort_option = None
        self._sort_ascending = True
        self._last_selected_item = None
        self._current_display_options = None
        self.setup_connections()

    def setup_connections(self):
        """
        –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∏ —Å–ª–æ—Ç—ã –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        self.view.add_button.clicked.connect(self.add_audiobook)
        self.view.audiobook_table.cellClicked.connect(self.new_item_clicked)
        self.view.sort_options.currentIndexChanged.connect(self.sort_changed)
        self.view.sort_direction_button.clicked.connect(self.toggle_sort_direction)
        self.view.search_panel.textChanged.connect(self.view.search_timer.start)
        self.view.search_timer.timeout.connect(self.do_search)

    def new_item_clicked(self, row):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É –≤ —Ç–∞–±–ª–∏—Ü–µ.
        """
        book_id = self.view.audiobook_table.item(row, 0).text()
        if self._last_selected_item != book_id:
            self._last_selected_item = book_id
            self.book_selected.emit(row, book_id)

    def update_sort_panel(self, options):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞–Ω–µ–ª—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
        """
        self._current_sort_option = self.model.get_option_by_name(options[0])
        self.view.sort_options.blockSignals(True)
        self.view.sort_options.clear()
        self.view.sort_options.addItems(options)
        self.view.sort_options.blockSignals(False)

    def update_display_options(self, options):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        """
        self._current_display_options = options
        self.update_audiobook_table()
        self.view.search_panel.clear()

    def do_search(self):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –≤ –ø–∞–Ω–µ–ª–∏ –ø–æ–∏—Å–∫–∞.
        """
        search_text = self.view.search_panel.text()
        self.update_audiobook_table(search_text=search_text)

    def toggle_sort_direction(self):
        """
        –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
        """
        self._sort_ascending = not self._sort_ascending
        self.view.sort_direction_button.setText("‚¨ÜÔ∏è" if self._sort_ascending else "‚¨áÔ∏è")
        self.sort_changed()

    def sort_changed(self):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
        """
        current_text = self.view.sort_options.currentText()
        self._current_sort_option = self.model.get_option_by_name(current_text)
        self.update_audiobook_table()

    def update_audiobook_table(self, sort_by=None, ascending=None, search_text="", display_options=None):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∞—É–¥–∏–æ–∫–Ω–∏–≥.
        """
        sort_by = sort_by or self._current_sort_option
        ascending = ascending if ascending is not None else self._sort_ascending
        display_options = display_options or self._current_display_options

        records = self.model.get_audiobooks_list(sort_by, ascending, search_text, display_options)

        self.view.audiobook_table.setColumnCount(len(display_options) + 3)  # –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è —ç–º–æ–¥–∑–∏
        self.view.audiobook_table.setHorizontalHeaderLabels(['ID'] + display_options + ['‚≠ê', 'üéß'])
        self.view.audiobook_table.setRowCount(len(records))

        header = self.view.audiobook_table.horizontalHeader()
        for col in range(len(display_options) + 3):
            if col < len(display_options) + 1:
                header.setSectionResizeMode(col, QHeaderView.ResizeMode.Stretch)
            else:
                header.setSectionResizeMode(col, QHeaderView.ResizeMode.Fixed)
                self.view.audiobook_table.setColumnWidth(col, 50)

        for row_idx, record in enumerate(records):
            book_id, is_favorite, is_completed, *data = record
            for col_idx, field in enumerate([book_id] + data):
                item = QTableWidgetItem(str(field))
                self.view.audiobook_table.setItem(row_idx, col_idx, item)

            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–∏–≥–∏
            favorite_item = QTableWidgetItem('‚úîÔ∏è' if is_favorite else '‚ùå')
            completed_item = QTableWidgetItem('‚úîÔ∏è' if is_completed else '‚ùå')
            favorite_item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)
            completed_item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)
            self.view.audiobook_table.setItem(row_idx, len(display_options) + 1, favorite_item)
            self.view.audiobook_table.setItem(row_idx, len(display_options) + 2, completed_item)

        # –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å book_id
        self.view.audiobook_table.setColumnHidden(0, True)

    def add_audiobook(self):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏.
        """
        choice = self.prompt_audiobook_choice()
        if choice == 0:  # –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª
            self.add_files()
        elif choice == 1:  # –í—ã–±—Ä–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            self.add_directories()

    @staticmethod
    def prompt_audiobook_choice():
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ–±–∞–≤–ª—è–µ–º–æ–π –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏.
        """
        msg_box = QMessageBox()
        msg_box.setWindowTitle("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏")
        msg_box.setText("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:")
        msg_box.addButton("–§–∞–π–ª", QMessageBox.ButtonRole.ActionRole)
        msg_box.addButton("–ü–∞–ø–∫—É", QMessageBox.ButtonRole.ActionRole)
        msg_box.addButton("–û—Ç–º–µ–Ω–∞", QMessageBox.ButtonRole.RejectRole)
        return msg_box.exec()

    def add_files(self):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
        """
        file_paths, _ = QFileDialog.getOpenFileNames(self.view, "–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã", "",
                                                     "Audio Files (*.mp3 *.aac *.wav)")
        for file_path in file_paths:
            if file_path:
                if not self.model.audiobook_exists(file_path):
                    self.model.import_audiobook(file_path)
                    book_id = self.model.get_book_id(file_path)
                    self.model.import_file(file_path, book_id)
                    self.update_audiobook_table()
                else:
                    QMessageBox.information(self.view, "–í–Ω–∏–º–∞–Ω–∏–µ!", f"–ê—É–¥–∏–æ–∫–Ω–∏–≥–∞ {file_path} —É–∂–µ –µ—Å—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ")

    def add_directories(self):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
        """
        directories = MultiDirectoryDialog.getExistingDirectories(self.view, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫–∏ —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º–∏")
        for directory in directories:
            if directory:
                if not self.model.audiobook_exists(directory):
                    files_to_add = self.model.get_audio_files(directory)
                    if files_to_add:
                        self.model.import_audiobook(files_to_add[0], directory)
                        book_id = self.model.get_book_id(directory)
                        for file_path in files_to_add:
                            self.model.import_file(file_path, book_id)
                        self.update_audiobook_table()
                else:
                    QMessageBox.information(self.view, "–í–Ω–∏–º–∞–Ω–∏–µ!",
                                            f"–ê—É–¥–∏–æ–∫–Ω–∏–≥–∞ –∏–∑ –ø–∞–ø–∫–∏ {directory} —É–∂–µ –µ—Å—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ")

